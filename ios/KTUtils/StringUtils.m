//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: _java/com/kloudtek/util/StringUtils.java
//
//  Created by yinkaf on 6/14/14.
//

#include "Base32.h"
#include "Base64.h"
#include "IOSPrimitiveArray.h"
#include "StringUtils.h"
#include "UnexpectedException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Character.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "URLDecoder.h"
#include "java/net/URLEncoder.h"

@implementation KTUtilStringUtils

+ (BOOL)isEmptyWithNSString:(NSString *)txt {
  return txt == nil || [txt isEmpty];
}

+ (BOOL)isNotEmptyWithNSString:(NSString *)txt {
  return ![KTUtilStringUtils isEmptyWithNSString:txt];
}

+ (BOOL)isBlankWithNSString:(NSString *)txt {
  return txt == nil || [txt isEmpty];
}

+ (BOOL)isNotBlankWithNSString:(NSString *)txt {
  return ![KTUtilStringUtils isEmptyWithNSString:txt];
}

+ (NSString *)urlEncodeWithNSString:(NSString *)txt {
  @try {
    return [JavaNetURLEncoder encodeWithNSString:txt withNSString:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

+ (NSString *)urlDecodeWithNSString:(NSString *)txt {
  @try {
    return [JavaNetURLDecoder decodeWithNSString:txt withNSString:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

+ (NSString *)capitalizeWithNSString:(NSString *)txt {
  int len;
  if (txt == nil || (len = ((int) [txt length])) == 0) {
    return txt;
  }
  JavaLangStringBuilder *tmp = [[JavaLangStringBuilder alloc] initWithInt:len];
  (void) [tmp appendWithChar:[JavaLangCharacter toTitleCaseWithChar:[((NSString *) nil_chk(txt)) charAtWithInt:0]]];
  (void) [tmp appendWithNSString:[txt substring:1]];
  return [tmp description];
}

+ (NSString *)base64EncodeWithByteArray:(IOSByteArray *)data {
  return [((KTUtilBase64 *) [[KTUtilBase64 alloc] init]) encodeToStringWithByteArray:data];
}

+ (IOSByteArray *)base64DecodeWithNSString:(NSString *)data {
  return [((KTUtilBase64 *) [[KTUtilBase64 alloc] init]) decodeWithNSString:data];
}

+ (NSString *)base64EncodeWithByteArray:(IOSByteArray *)data
                            withBoolean:(BOOL)urlSafe {
  return [((KTUtilBase64 *) [[KTUtilBase64 alloc] initWithBoolean:urlSafe]) encodeToStringWithByteArray:data];
}

+ (IOSByteArray *)base64DecodeWithNSString:(NSString *)data
                               withBoolean:(BOOL)urlSafe {
  return [((KTUtilBase64 *) [[KTUtilBase64 alloc] initWithBoolean:urlSafe]) decodeWithNSString:data];
}

+ (NSString *)base32EncodeWithByteArray:(IOSByteArray *)data {
  return [((KTUtilBase32 *) [[KTUtilBase32 alloc] init]) encodeToStringWithByteArray:data];
}

+ (IOSByteArray *)base32DecodeWithNSString:(NSString *)data {
  return [((KTUtilBase32 *) [[KTUtilBase32 alloc] init]) decodeWithNSString:data];
}

+ (NSString *)base32EncodeWithByteArray:(IOSByteArray *)data
                            withBoolean:(BOOL)urlSafe {
  return [((KTUtilBase32 *) [[KTUtilBase32 alloc] initWithBoolean:urlSafe]) encodeToStringWithByteArray:data];
}

+ (IOSByteArray *)base32DecodeWithNSString:(NSString *)data
                               withBoolean:(BOOL)urlSafe {
  return [((KTUtilBase32 *) [[KTUtilBase32 alloc] initWithBoolean:urlSafe]) decodeWithNSString:data];
}

+ (IOSByteArray *)utf8WithNSString:(NSString *)str {
  @try {
    return [((NSString *) nil_chk(str)) getBytesWithCharsetName:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[KTUtilUnexpectedException alloc] initWithJavaLangThrowable:e];
  }
}

+ (NSString *)utf8WithByteArray:(IOSByteArray *)utf8Chars {
  @try {
    return [NSString stringWithBytes:utf8Chars charsetName:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[KTUtilUnexpectedException alloc] initWithJavaLangThrowable:e];
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isEmptyWithNSString:", "isEmpty", "Z", 0x9, NULL },
    { "isNotEmptyWithNSString:", "isNotEmpty", "Z", 0x9, NULL },
    { "isBlankWithNSString:", "isBlank", "Z", 0x9, NULL },
    { "isNotBlankWithNSString:", "isNotBlank", "Z", 0x9, NULL },
    { "urlEncodeWithNSString:", "urlEncode", "Ljava.lang.String;", 0x9, NULL },
    { "urlDecodeWithNSString:", "urlDecode", "Ljava.lang.String;", 0x9, NULL },
    { "capitalizeWithNSString:", "capitalize", "Ljava.lang.String;", 0x9, NULL },
    { "base64EncodeWithByteArray:", "base64Encode", "Ljava.lang.String;", 0x9, NULL },
    { "base64DecodeWithNSString:", "base64Decode", "[B", 0x9, NULL },
    { "base64EncodeWithByteArray:withBoolean:", "base64Encode", "Ljava.lang.String;", 0x9, NULL },
    { "base64DecodeWithNSString:withBoolean:", "base64Decode", "[B", 0x9, NULL },
    { "base32EncodeWithByteArray:", "base32Encode", "Ljava.lang.String;", 0x9, NULL },
    { "base32DecodeWithNSString:", "base32Decode", "[B", 0x9, NULL },
    { "base32EncodeWithByteArray:withBoolean:", "base32Encode", "Ljava.lang.String;", 0x9, NULL },
    { "base32DecodeWithNSString:withBoolean:", "base32Decode", "[B", 0x9, NULL },
    { "utf8WithNSString:", "utf8", "[B", 0x9, NULL },
    { "utf8WithByteArray:", "utf8", "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _KTUtilStringUtils = { "StringUtils", "com.kloudtek.util", NULL, 0x1, 18, methods, 0, NULL, 0, NULL};
  return &_KTUtilStringUtils;
}

@end
