//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: _java/com/kloudtek/util/crypto/CryptoEngine.java
//
//  Created by yinkaf on 6/11/14.
//

#include "AsymmetricAlgorithm.h"
#include "CryptoEngine.h"
#include "DigestAlgorithm.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "SymmetricAlgorithm.h"
#include "InvalidKeyException.h"
#include "Key.h"
#include "KeyPair.h"
#include "PrivateKey.h"
#include "PublicKey.h"
#include "SignatureException.h"
#include "RSAPublicKey.h"
#include "InvalidKeySpecException.h"
#include "BadPaddingException.h"
#include "IllegalBlockSizeException.h"
#include "SecretKey.h"

@implementation ComKloudtekUtilCryptoCryptoEngine

- (id<JavaxCryptoSecretKey>)generateKeyWithComKloudtekUtilCryptoSymmetricAlgorithmEnum:(ComKloudtekUtilCryptoSymmetricAlgorithmEnum *)alg
                                                                               withInt:(int)keysize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaxCryptoSecretKey>)generateHmacKeyWithComKloudtekUtilCryptoDigestAlgorithmEnum:(ComKloudtekUtilCryptoDigestAlgorithmEnum *)algorithm {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaxCryptoSecretKey>)generateAesKeyWithInt:(int)keySize {
  return [self generateKeyWithComKloudtekUtilCryptoSymmetricAlgorithmEnum:ComKloudtekUtilCryptoSymmetricAlgorithmEnum_get_AES() withInt:keySize];
}

- (id<JavaxCryptoSecretKey>)generateAes128Key {
  return [self generateKeyWithComKloudtekUtilCryptoSymmetricAlgorithmEnum:ComKloudtekUtilCryptoSymmetricAlgorithmEnum_get_AES() withInt:128];
}

- (id<JavaxCryptoSecretKey>)generateAes256Key {
  return [self generateKeyWithComKloudtekUtilCryptoSymmetricAlgorithmEnum:ComKloudtekUtilCryptoSymmetricAlgorithmEnum_get_AES() withInt:256];
}

- (JavaSecurityKeyPair *)generateKeyPairWithComKloudtekUtilCryptoAsymmetricAlgorithmEnum:(ComKloudtekUtilCryptoAsymmetricAlgorithmEnum *)alg
                                                                                 withInt:(int)keysize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaSecurityKeyPair *)generateRSA2048KeyPair {
  return [self generateKeyPairWithComKloudtekUtilCryptoAsymmetricAlgorithmEnum:ComKloudtekUtilCryptoAsymmetricAlgorithmEnum_get_RSA() withInt:2048];
}

- (JavaSecurityKeyPair *)generateRSA4096KeyPair {
  return [self generateKeyPairWithComKloudtekUtilCryptoAsymmetricAlgorithmEnum:ComKloudtekUtilCryptoAsymmetricAlgorithmEnum_get_RSA() withInt:4096];
}

- (id<JavaSecurityInterfacesRSAPublicKey>)readRSAPublicKeyWithByteArray:(IOSByteArray *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaSecurityPrivateKey>)readRSAPrivateKeyWithByteArray:(IOSByteArray *)encodedPriKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaxCryptoSecretKey>)readAESKeyWithByteArray:(IOSByteArray *)encodedAesKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaxCryptoSecretKey>)readHMACKeyWithComKloudtekUtilCryptoDigestAlgorithmEnum:(ComKloudtekUtilCryptoDigestAlgorithmEnum *)algorithm
                                                                      withByteArray:(IOSByteArray *)encodedKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)hmacWithComKloudtekUtilCryptoDigestAlgorithmEnum:(ComKloudtekUtilCryptoDigestAlgorithmEnum *)algorithm
                                          withJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                                     withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)hmacSha1WithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                     withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)hmacSha256WithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                       withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)hmacSha512WithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                       withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)aesEncryptWithByteArray:(IOSByteArray *)key
                            withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)aesEncryptWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                       withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)aesDecryptWithByteArray:(IOSByteArray *)key
                            withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)aesDecryptWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                       withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)encryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
                               withByteArray:(IOSByteArray *)data
                                withNSString:(NSString *)alg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)decryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
                               withByteArray:(IOSByteArray *)data
                                withNSString:(NSString *)alg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)cryptWithJavaSecurityKey:(id<JavaSecurityKey>)key
                             withByteArray:(IOSByteArray *)data
                              withNSString:(NSString *)alg
                                   withInt:(int)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)rsaEncryptWithByteArray:(IOSByteArray *)key
                            withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)rsaEncryptWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                                        withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)rsaDecryptWithByteArray:(IOSByteArray *)key
                            withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)rsaDecryptWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                         withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)rsaSignWithComKloudtekUtilCryptoDigestAlgorithmEnum:(ComKloudtekUtilCryptoDigestAlgorithmEnum *)digestAlgorithms
                                           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                        withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)rsaVerifySignatureWithComKloudtekUtilCryptoDigestAlgorithmEnum:(ComKloudtekUtilCryptoDigestAlgorithmEnum *)digestAlgorithms
                                             withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                                                         withByteArray:(IOSByteArray *)data
                                                         withByteArray:(IOSByteArray *)signature {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSByteArray *)signWithNSString:(NSString *)algorithm
        withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                     withByteArray:(IOSByteArray *)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)verifySignatureWithNSString:(NSString *)algorithm
          withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withByteArray:(IOSByteArray *)data
                      withByteArray:(IOSByteArray *)signature {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaxCryptoSecretKey>)generatePBEAESKeyWithCharArray:(IOSCharArray *)key
                                                   withInt:(int)iterations
                                             withByteArray:(IOSByteArray *)salt
                                                   withInt:(int)keyLen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "generateKeyWithComKloudtekUtilCryptoSymmetricAlgorithmEnum:withInt:", "generateKey", "Ljavax.crypto.SecretKey;", 0x401, NULL },
    { "generateHmacKeyWithComKloudtekUtilCryptoDigestAlgorithmEnum:", "generateHmacKey", "Ljavax.crypto.SecretKey;", 0x401, NULL },
    { "generateAesKeyWithInt:", "generateAesKey", "Ljavax.crypto.SecretKey;", 0x1, NULL },
    { "generateAes128Key", NULL, "Ljavax.crypto.SecretKey;", 0x1, NULL },
    { "generateAes256Key", NULL, "Ljavax.crypto.SecretKey;", 0x1, NULL },
    { "generateKeyPairWithComKloudtekUtilCryptoAsymmetricAlgorithmEnum:withInt:", "generateKeyPair", "Ljava.security.KeyPair;", 0x401, NULL },
    { "generateRSA2048KeyPair", NULL, "Ljava.security.KeyPair;", 0x1, NULL },
    { "generateRSA4096KeyPair", NULL, "Ljava.security.KeyPair;", 0x1, NULL },
    { "readRSAPublicKeyWithByteArray:", "readRSAPublicKey", "Ljava.security.interfaces.RSAPublicKey;", 0x401, "Ljava.security.spec.InvalidKeySpecException;" },
    { "readRSAPrivateKeyWithByteArray:", "readRSAPrivateKey", "Ljava.security.PrivateKey;", 0x401, "Ljava.security.spec.InvalidKeySpecException;" },
    { "readAESKeyWithByteArray:", "readAESKey", "Ljavax.crypto.SecretKey;", 0x401, NULL },
    { "readHMACKeyWithComKloudtekUtilCryptoDigestAlgorithmEnum:withByteArray:", "readHMACKey", "Ljavax.crypto.SecretKey;", 0x401, NULL },
    { "hmacWithComKloudtekUtilCryptoDigestAlgorithmEnum:withJavaxCryptoSecretKey:withByteArray:", "hmac", "[B", 0x401, "Ljava.security.InvalidKeyException;" },
    { "hmacSha1WithJavaxCryptoSecretKey:withByteArray:", "hmacSha1", "[B", 0x401, "Ljava.security.InvalidKeyException;" },
    { "hmacSha256WithJavaxCryptoSecretKey:withByteArray:", "hmacSha256", "[B", 0x401, "Ljava.security.InvalidKeyException;" },
    { "hmacSha512WithJavaxCryptoSecretKey:withByteArray:", "hmacSha512", "[B", 0x401, "Ljava.security.InvalidKeyException;" },
    { "aesEncryptWithByteArray:withByteArray:", "aesEncrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;" },
    { "aesEncryptWithJavaxCryptoSecretKey:withByteArray:", "aesEncrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;" },
    { "aesDecryptWithByteArray:withByteArray:", "aesDecrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;" },
    { "aesDecryptWithJavaxCryptoSecretKey:withByteArray:", "aesDecrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;" },
    { "encryptWithJavaSecurityKey:withByteArray:withNSString:", "encrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.IllegalBlockSizeException;Ljavax.crypto.BadPaddingException;" },
    { "decryptWithJavaSecurityKey:withByteArray:withNSString:", "decrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.IllegalBlockSizeException;Ljavax.crypto.BadPaddingException;" },
    { "cryptWithJavaSecurityKey:withByteArray:withNSString:withInt:", "crypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.IllegalBlockSizeException;Ljavax.crypto.BadPaddingException;" },
    { "rsaEncryptWithByteArray:withByteArray:", "rsaEncrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;Ljava.security.spec.InvalidKeySpecException;" },
    { "rsaEncryptWithJavaSecurityPublicKey:withByteArray:", "rsaEncrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;" },
    { "rsaDecryptWithByteArray:withByteArray:", "rsaDecrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;Ljava.security.spec.InvalidKeySpecException;" },
    { "rsaDecryptWithJavaSecurityPrivateKey:withByteArray:", "rsaDecrypt", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljavax.crypto.BadPaddingException;Ljavax.crypto.IllegalBlockSizeException;" },
    { "rsaSignWithComKloudtekUtilCryptoDigestAlgorithmEnum:withJavaSecurityPrivateKey:withByteArray:", "rsaSign", "[B", 0x401, "Ljava.security.InvalidKeyException;Ljava.security.SignatureException;" },
    { "rsaVerifySignatureWithComKloudtekUtilCryptoDigestAlgorithmEnum:withJavaSecurityPublicKey:withByteArray:withByteArray:", "rsaVerifySignature", "V", 0x401, "Ljava.security.InvalidKeyException;Ljava.security.SignatureException;" },
    { "signWithNSString:withJavaSecurityPrivateKey:withByteArray:", "sign", "[B", 0x401, "Ljava.security.SignatureException;Ljava.security.InvalidKeyException;" },
    { "verifySignatureWithNSString:withJavaSecurityPublicKey:withByteArray:withByteArray:", "verifySignature", "V", 0x401, "Ljava.security.SignatureException;Ljava.security.InvalidKeyException;" },
    { "generatePBEAESKeyWithCharArray:withInt:withByteArray:withInt:", "generatePBEAESKey", "Ljavax.crypto.SecretKey;", 0x401, "Ljava.security.spec.InvalidKeySpecException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _ComKloudtekUtilCryptoCryptoEngine = { "CryptoEngine", "com.kloudtek.util.crypto", NULL, 0x401, 33, methods, 0, NULL, 0, NULL};
  return &_ComKloudtekUtilCryptoCryptoEngine;
}

@end
